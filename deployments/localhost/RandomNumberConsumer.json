{
  "address": "0x46a0977e15Cad416135Bd724679F21AD047bB44b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_link",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "getRandomNumber",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randomResult",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "randomness",
          "type": "uint256"
        }
      ],
      "name": "rawFulfillRandomness",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x23de2bf04c25098901a7f1cd684a4c871a06e3a28ae1693a5a5e7162255d16c9",
  "receipt": {
    "to": null,
    "from": "0x0831A0EA52D5768248C61AFC79280354c7C5E646",
    "contractAddress": "0x46a0977e15Cad416135Bd724679F21AD047bB44b",
    "transactionIndex": 0,
    "gasUsed": "637019",
    "logsBloom": "0x
    "blockHash": "0x80b09954a297a07aaaa931afdfe6d5d43b06b9069c6756fa27086b29786c6085",
    "transactionHash": "0x23de2bf04c25098901a7f1cd684a4c871a06e3a28ae1693a5a5e7162255d16c9",
    "logs": [],
    "blockNumber": 5,
    "cumulativeGasUsed": "637019",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa9AcEec85800C59BA8F07C4755b303e830e3B0f2",
    "0x70AB9Ff7528599A673Fe7616C8Dfaf00a9D3b8D8",
    "0x6c3699283bda56ad74f6b855546325b68d482e983852a7a82979cc4807b641f4",
    "100000000000000000"
  ],
  "solcInputHash": "e51396a6e3152c2904e039f6c3a5e546",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_link\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"getRandomNumber\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomResult\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor inherits VRFConsumerBase Network: Kovan Chainlink VRF Coordinator address: 0xdD3782915140c8f3b190B5D67eAc6dc5760C46E9 LINK token address:                0xa36085F69e2889c224210F603D836748e7dC0088 Key Hash: 0x6c3699283bda56ad74f6b855546325b68d482e983852a7a82979cc4807b641f4\"},\"getRandomNumber()\":{\"notice\":\"Requests randomness\"}},\"notice\":\"THIS IS AN EXAMPLE CONTRACT WHICH USES HARDCODED VALUES FOR CLARITY. PLEASE DO NOT USE THIS CODE IN PRODUCTION.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RandomNumberConsumer.sol\":\"RandomNumberConsumer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constuctor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(\\n    bytes32 requestId,\\n    uint256 randomness\\n  )\\n    internal\\n    virtual;\\n\\n  /**\\n   * @dev In order to keep backwards compatibility we have kept the user\\n   * seed field around. We remove the use of it because given that the blockhash\\n   * enters later, it overrides whatever randomness the used seed provides.\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\n   * we have removed it from usage and can now provide a simpler API.\\n   */\\n  uint256 constant private USER_SEED_PLACEHOLDER = 0;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(\\n    bytes32 _keyHash,\\n    uint256 _fee\\n  )\\n    internal\\n    returns (\\n      bytes32 requestId\\n    )\\n  {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed  = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash] + 1;\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface immutable internal LINK;\\n  address immutable private vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 /* keyHash */ => uint256 /* nonce */) private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(\\n    address _vrfCoordinator,\\n    address _link\\n  ) {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(\\n    bytes32 requestId,\\n    uint256 randomness\\n  )\\n    external\\n  {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\",\"keccak256\":\"0x991e49ee47043d6667887d7ed6ab5a0f8e4e5550f92b09b0d75c1fb1a473cd8d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(\\n    bytes32 _keyHash,\\n    uint256 _userSeed,\\n    address _requester,\\n    uint256 _nonce\\n  )\\n    internal\\n    pure\\n    returns (\\n      uint256\\n    )\\n  {\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(\\n    bytes32 _keyHash,\\n    uint256 _vRFInputSeed\\n  )\\n    internal\\n    pure\\n    returns (\\n      bytes32\\n    )\\n  {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\",\"keccak256\":\"0x7c8dad07e6c6c9269d97fd1191ccf9c0f0068683f1f88003e688eef9373de0d9\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n\\n  function allowance(\\n    address owner,\\n    address spender\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 remaining\\n    );\\n\\n  function approve(\\n    address spender,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function balanceOf(\\n    address owner\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 balance\\n    );\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8 decimalPlaces\\n    );\\n\\n  function decreaseApproval(\\n    address spender,\\n    uint256 addedValue\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function increaseApproval(\\n    address spender,\\n    uint256 subtractedValue\\n  ) external;\\n\\n  function name()\\n    external\\n    view\\n    returns (\\n      string memory tokenName\\n    );\\n\\n  function symbol()\\n    external\\n    view\\n    returns (\\n      string memory tokenSymbol\\n    );\\n\\n  function totalSupply()\\n    external\\n    view\\n    returns (\\n      uint256 totalTokensIssued\\n    );\\n\\n  function transfer(\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  )\\n    external\\n    returns (\\n      bool success\\n    );\\n\\n}\\n\",\"keccak256\":\"0x50528c237386c55ff122d047f91b32be7abe24e9dfdc609de21cd605aae83b9a\",\"license\":\"MIT\"},\"contracts/RandomNumberConsumer.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n/* solhint-disable */\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\\\";\\n\\n/**\\n * THIS IS AN EXAMPLE CONTRACT WHICH USES HARDCODED VALUES FOR CLARITY.\\n * PLEASE DO NOT USE THIS CODE IN PRODUCTION.\\n */\\ncontract RandomNumberConsumer is VRFConsumerBase {\\n    bytes32 internal keyHash;\\n    uint256 internal fee;\\n\\n    uint256 public randomResult;\\n\\n    /**\\n     * Constructor inherits VRFConsumerBase\\n     *\\n     * Network: Kovan\\n     * Chainlink VRF Coordinator address: 0xdD3782915140c8f3b190B5D67eAc6dc5760C46E9\\n     * LINK token address:                0xa36085F69e2889c224210F603D836748e7dC0088\\n     * Key Hash: 0x6c3699283bda56ad74f6b855546325b68d482e983852a7a82979cc4807b641f4\\n     */\\n    constructor(\\n        address _vrfCoordinator,\\n        address _link,\\n        bytes32 _keyHash,\\n        uint256 _fee\\n    )\\n        VRFConsumerBase(\\n            _vrfCoordinator, // VRF Coordinator\\n            _link // LINK Token\\n        )\\n    {\\n        keyHash = _keyHash;\\n        fee = _fee;\\n    }\\n\\n    /**\\n     * Requests randomness\\n     */\\n    function getRandomNumber() public returns (bytes32 requestId) {\\n        require(LINK.balanceOf(address(this)) >= fee, \\\"Not enough LINK - fill contract with faucet\\\");\\n        return requestRandomness(keyHash, fee);\\n    }\\n\\n    /**\\n     * Callback function used by VRF Coordinator\\n     */\\n    function fulfillRandomness(\\n        bytes32, /* requestId */\\n        uint256 randomness\\n    ) internal override {\\n        randomResult = randomness;\\n    }\\n\\n    // function withdrawLink() external {} - Implement a withdraw function to avoid locking your LINK in the contract\\n}\\n\",\"keccak256\":\"0xad466883e3488079de7bbf5511beb4c83494f67684df17d6419f17942ec9ab39\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162000be038038062000be083398181016040528101906200003791906200019b565b83838173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505050508160018190555080600281905550505050506200020d565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000ed82620000c0565b9050919050565b620000ff81620000e0565b81146200010b57600080fd5b50565b6000815190506200011f81620000f4565b92915050565b6000819050919050565b6200013a8162000125565b81146200014657600080fd5b50565b6000815190506200015a816200012f565b92915050565b6000819050919050565b620001758162000160565b81146200018157600080fd5b50565b60008151905062000195816200016a565b92915050565b60008060008060808587031215620001b857620001b7620000bb565b5b6000620001c8878288016200010e565b9450506020620001db878288016200010e565b9350506040620001ee8782880162000149565b9250506060620002018782880162000184565b91505092959194509250565b60805160a0516109a0620002406000396000818160a6015261028d015260008181610147015261025101526109a06000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806342619f661461004657806394985ddd14610064578063dbdff2c114610080575b600080fd5b61004e61009e565b60405161005b9190610434565b60405180910390f35b61007e600480360381019061007991906104b6565b6100a4565b005b610088610140565b6040516100959190610505565b60405180910390f35b60035481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610132576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101299061057d565b60405180910390fd5b61013c8282610242565b5050565b60006002547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161019e91906105de565b60206040518083038186803b1580156101b657600080fd5b505afa1580156101ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ee919061060e565b101561022f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610226906106ad565b60405180910390fd5b61023d60015460025461024d565b905090565b806003819055505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634000aea07f0000000000000000000000000000000000000000000000000000000000000000848660006040516020016102c19291906106cd565b6040516020818303038152906040526040518463ffffffff1660e01b81526004016102ee9392919061078f565b602060405180830381600087803b15801561030857600080fd5b505af115801561031c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103409190610805565b50600061036284600030600080898152602001908152602001600020546103ac565b90506001600080868152602001908152602001600020546103839190610861565b600080868152602001908152602001600020819055506103a384826103e8565b91505092915050565b6000848484846040516020016103c594939291906108b7565b6040516020818303038152906040528051906020012060001c9050949350505050565b600082826040516020016103fd92919061093e565b60405160208183030381529060405280519060200120905092915050565b6000819050919050565b61042e8161041b565b82525050565b60006020820190506104496000830184610425565b92915050565b600080fd5b6000819050919050565b61046781610454565b811461047257600080fd5b50565b6000813590506104848161045e565b92915050565b6104938161041b565b811461049e57600080fd5b50565b6000813590506104b08161048a565b92915050565b600080604083850312156104cd576104cc61044f565b5b60006104db85828601610475565b92505060206104ec858286016104a1565b9150509250929050565b6104ff81610454565b82525050565b600060208201905061051a60008301846104f6565b92915050565b600082825260208201905092915050565b7f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c00600082015250565b6000610567601f83610520565b915061057282610531565b602082019050919050565b600060208201905081810360008301526105968161055a565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105c88261059d565b9050919050565b6105d8816105bd565b82525050565b60006020820190506105f360008301846105cf565b92915050565b6000815190506106088161048a565b92915050565b6000602082840312156106245761062361044f565b5b6000610632848285016105f9565b91505092915050565b7f4e6f7420656e6f756768204c494e4b202d2066696c6c20636f6e74726163742060008201527f7769746820666175636574000000000000000000000000000000000000000000602082015250565b6000610697602b83610520565b91506106a28261063b565b604082019050919050565b600060208201905081810360008301526106c68161068a565b9050919050565b60006040820190506106e260008301856104f6565b6106ef6020830184610425565b9392505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610730578082015181840152602081019050610715565b8381111561073f576000848401525b50505050565b6000601f19601f8301169050919050565b6000610761826106f6565b61076b8185610701565b935061077b818560208601610712565b61078481610745565b840191505092915050565b60006060820190506107a460008301866105cf565b6107b16020830185610425565b81810360408301526107c38184610756565b9050949350505050565b60008115159050919050565b6107e2816107cd565b81146107ed57600080fd5b50565b6000815190506107ff816107d9565b92915050565b60006020828403121561081b5761081a61044f565b5b6000610829848285016107f0565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061086c8261041b565b91506108778361041b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156108ac576108ab610832565b5b828201905092915050565b60006080820190506108cc60008301876104f6565b6108d96020830186610425565b6108e660408301856105cf565b6108f36060830184610425565b95945050505050565b6000819050919050565b61091761091282610454565b6108fc565b82525050565b6000819050919050565b6109386109338261041b565b61091d565b82525050565b600061094a8285610906565b60208201915061095a8284610927565b602082019150819050939250505056fea264697066735822122079d1ad71cfbfa618e7fcbb4ae286c12474c48f2c994b9c2bc96e5140f305db7764736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806342619f661461004657806394985ddd14610064578063dbdff2c114610080575b600080fd5b61004e61009e565b60405161005b9190610434565b60405180910390f35b61007e600480360381019061007991906104b6565b6100a4565b005b610088610140565b6040516100959190610505565b60405180910390f35b60035481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610132576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101299061057d565b60405180910390fd5b61013c8282610242565b5050565b60006002547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161019e91906105de565b60206040518083038186803b1580156101b657600080fd5b505afa1580156101ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ee919061060e565b101561022f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610226906106ad565b60405180910390fd5b61023d60015460025461024d565b905090565b806003819055505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16634000aea07f0000000000000000000000000000000000000000000000000000000000000000848660006040516020016102c19291906106cd565b6040516020818303038152906040526040518463ffffffff1660e01b81526004016102ee9392919061078f565b602060405180830381600087803b15801561030857600080fd5b505af115801561031c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103409190610805565b50600061036284600030600080898152602001908152602001600020546103ac565b90506001600080868152602001908152602001600020546103839190610861565b600080868152602001908152602001600020819055506103a384826103e8565b91505092915050565b6000848484846040516020016103c594939291906108b7565b6040516020818303038152906040528051906020012060001c9050949350505050565b600082826040516020016103fd92919061093e565b60405160208183030381529060405280519060200120905092915050565b6000819050919050565b61042e8161041b565b82525050565b60006020820190506104496000830184610425565b92915050565b600080fd5b6000819050919050565b61046781610454565b811461047257600080fd5b50565b6000813590506104848161045e565b92915050565b6104938161041b565b811461049e57600080fd5b50565b6000813590506104b08161048a565b92915050565b600080604083850312156104cd576104cc61044f565b5b60006104db85828601610475565b92505060206104ec858286016104a1565b9150509250929050565b6104ff81610454565b82525050565b600060208201905061051a60008301846104f6565b92915050565b600082825260208201905092915050565b7f4f6e6c7920565246436f6f7264696e61746f722063616e2066756c66696c6c00600082015250565b6000610567601f83610520565b915061057282610531565b602082019050919050565b600060208201905081810360008301526105968161055a565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105c88261059d565b9050919050565b6105d8816105bd565b82525050565b60006020820190506105f360008301846105cf565b92915050565b6000815190506106088161048a565b92915050565b6000602082840312156106245761062361044f565b5b6000610632848285016105f9565b91505092915050565b7f4e6f7420656e6f756768204c494e4b202d2066696c6c20636f6e74726163742060008201527f7769746820666175636574000000000000000000000000000000000000000000602082015250565b6000610697602b83610520565b91506106a28261063b565b604082019050919050565b600060208201905081810360008301526106c68161068a565b9050919050565b60006040820190506106e260008301856104f6565b6106ef6020830184610425565b9392505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610730578082015181840152602081019050610715565b8381111561073f576000848401525b50505050565b6000601f19601f8301169050919050565b6000610761826106f6565b61076b8185610701565b935061077b818560208601610712565b61078481610745565b840191505092915050565b60006060820190506107a460008301866105cf565b6107b16020830185610425565b81810360408301526107c38184610756565b9050949350505050565b60008115159050919050565b6107e2816107cd565b81146107ed57600080fd5b50565b6000815190506107ff816107d9565b92915050565b60006020828403121561081b5761081a61044f565b5b6000610829848285016107f0565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061086c8261041b565b91506108778361041b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156108ac576108ab610832565b5b828201905092915050565b60006080820190506108cc60008301876104f6565b6108d96020830186610425565b6108e660408301856105cf565b6108f36060830184610425565b95945050505050565b6000819050919050565b61091761091282610454565b6108fc565b82525050565b6000819050919050565b6109386109338261041b565b61091d565b82525050565b600061094a8285610906565b60208201915061095a8284610927565b602082019150819050939250505056fea264697066735822122079d1ad71cfbfa618e7fcbb4ae286c12474c48f2c994b9c2bc96e5140f305db7764736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor inherits VRFConsumerBase Network: Kovan Chainlink VRF Coordinator address: 0xdD3782915140c8f3b190B5D67eAc6dc5760C46E9 LINK token address:                0xa36085F69e2889c224210F603D836748e7dC0088 Key Hash: 0x6c3699283bda56ad74f6b855546325b68d482e983852a7a82979cc4807b641f4"
      },
      "getRandomNumber()": {
        "notice": "Requests randomness"
      }
    },
    "notice": "THIS IS AN EXAMPLE CONTRACT WHICH USES HARDCODED VALUES FOR CLARITY. PLEASE DO NOT USE THIS CODE IN PRODUCTION.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 879,
        "contract": "contracts/RandomNumberConsumer.sol:RandomNumberConsumer",
        "label": "nonces",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 3447,
        "contract": "contracts/RandomNumberConsumer.sol:RandomNumberConsumer",
        "label": "keyHash",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 3449,
        "contract": "contracts/RandomNumberConsumer.sol:RandomNumberConsumer",
        "label": "fee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3451,
        "contract": "contracts/RandomNumberConsumer.sol:RandomNumberConsumer",
        "label": "randomResult",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
